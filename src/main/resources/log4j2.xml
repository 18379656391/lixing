<?xml version="1.0" encoding="UTF-8"?>
<!--level级别：All < Trace < Debug < Info < Warn < Error < Fatal < OFF-->
<!--Configuration有两个属性 status 和 monitorInterval，
1.status用来设置日志级别，用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出
2.monitorInterval：Log4j能够自动检测修改配置文件和重新配置本身，用来设置监控间隔，单位是秒，最小是5s。-->
<!--有两个子节点 Appenders 和 Loggers，分别用来配置日志输出和日志级别。-->
<Configuration status="WARN" monitorInterval="30">
    <Properties>
        <!-- 控制台日志样式 -->
        <property name="CONSOLE_LOG_PATTERN"
                  value="%d{yyyy-MM-dd HH:mm:ss.SSS}  %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} %style{[%15.15t]}{bright,magenta} -- %style{%c{1.}.%M [%L]}{cyan} : %m%n" />
        <!-- 文件日志样式 -->
        <property name="FILE_LOG_PATTERN"
                  value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5p %c{9.9.9.1} %L : %m%n"/>

        <property name="CONTEXT_NAME" value="operate-copilot-app"/>
        <property name="LOG_PATH" value="logs"/>
        <property name="MAX_FILE_SIZE" value="100MB" />
        <property name="MAX_FILE_NUM" value="5" />
        <property name="FILE_DEADLINE" value="30d" />
        <property name="FILE_MAX_SIZE" value="2G" />
    </Properties>

    <!--Appenders节点： 常用的有三个子节点：Console、File、RollingFile。-->
    <Appenders>
        <!--Console：输出到控制台，可以指定输出格式。属性：name:指定Appender的名字 target:指定输出目标，可以是SYSTEM_OUT(默认)或者SYSTEM_ERR-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- PatternLayout:指定输出格式，不设置默认%m%n。 -->
            <!-- 使用%X包含ThreadContext添加的全部内容   使用%X{key}包括指定的键      -->
            <!--    %d:        日期和时间，格式为 yyyy-MM-dd HH:mm:ss.SSS
                    %t:        线程名
                    %level:    日志级别，并且通过%-5level指定了左对齐并保留至少5个字符宽度
                    %logger:   完整类名或者Logger名称，这里限制显示36个字符
                    %msg:      日志消息内容
                    %n:        换行符
                    %p:     %-5p，日志级别（简写形式）左对齐且至少占用5个字符宽度。例如："DEBUG"、"INFO"等。
                    %c:     类名或者Logger名称，这里只显示第一个包的名字
                    :%L     行号转换器，表示记录该日志事件的方法所在的行号。
                    %xEx{full,separator=\n===========\n}: 异常堆栈跟踪转换器，它会完整地输出异常及其堆栈跟踪信息，并在每个堆栈帧之间用自定义的分隔符（这里是=======）隔开。这样可以清晰地区分堆栈的不同部分，方便阅读和分析。
            -->
            <PatternLayout pattern="%-5level %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] |[%X{request_id}]| %logger{36}:%L - %msg%n"/>
        </Console>
        <!--File：输出到文件，可以指定输出格式和文件名。属性：name:指定Appender的名字 fileName:指定输出文件名，可以是绝对路径或者相对路径，PatternLayout:指定输出格式，不设置默认%m%n。-->
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
<!--        <File name="log" fileName="logs/test.log" append="false">-->
<!--        <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>-->
<!--        </File>-->

        <!--3. RollingFile：用来定义超过指定大小自动删除旧的创建新的的Appender，滚动输出到文件，可以指定输出格式、文件名、最大文件大小、最大备份数。属性：
        name:指定Appender的名字
        fileName:指定输出文件名，可以是绝对路径或者相对路径
        PatternLayout:指定输出格式，不设置默认%m%n
        filePattern:指定新建日志文件的名称格式
        Policies:用来定义日志文件滚动策略，比如按天、按大小、按时间等。
            SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小
            TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am
            DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)
        -->

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="logs/info.log"
                     filePattern="logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <filters>
                <!--不包含-->
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <!--包含-->
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </filters>
        </RollingFile>
        <RollingFile name="RollingFileWarn" fileName="logs/warn.log"
                     filePattern="logs/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
        <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        <Policies>
            <TimeBasedTriggeringPolicy/>
            <SizeBasedTriggeringPolicy size="100 MB"/>
        </Policies>
        <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
        <DefaultRolloverStrategy max="20"/>

        <filters>
            <!--onMatch="ACCEPT" 表示匹配该级别及以上
            onMatch="DENY" 表示不匹配该级别及以上
            onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上
            onMismatch="ACCEPT" 表示匹配该级别以下
            onMismatch="NEUTRAL" 表示该级别及以下的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的
            onMismatch="DENY" 表示不匹配该级别以下的-->
            <!--不包含-->
            <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
            <!--包含-->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
        </filters>
        </RollingFile>
        <RollingFile name="RollingFileError" fileName="logs/error.log"
                     filePattern="logs/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
        <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        <Policies>
            <TimeBasedTriggeringPolicy/>
            <SizeBasedTriggeringPolicy size="100 MB"/>
        </Policies>
        <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
        </RollingFile>
    </Appenders>
    <Loggers>
        <!-- 指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出-->
        <Root level="info">
            <!--用来指定该日志输出到哪个Appender.-->
            <AppenderRef ref="Console"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </Root>

        <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等
        1.name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点
        2.AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出。
        3.additivity：是否继承root节点，默认是true继承。默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出。
        若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。
        -->
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO" additivity="false">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
        </logger>
        <logger name="org.mybatis" level="INFO">
        </logger>
    </Loggers>
</Configuration>